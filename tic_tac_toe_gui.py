# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets # type: ignore
from tic_tac_toe_class import tic_tac_toe_gui

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(600, 600)

        # Main window
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # Main Title
        self.mainTitle = QtWidgets.QLabel(self.centralwidget)
        self.mainTitle.setGeometry(QtCore.QRect(50, 10, 500, 75))
        font = QtGui.QFont()
        font.setPointSize(19)
        font.setBold(True)
        font.setWeight(75)
        self.mainTitle.setFont(font)
        self.mainTitle.setTextFormat(QtCore.Qt.PlainText)
        self.mainTitle.setAlignment(QtCore.Qt.AlignCenter)
        self.mainTitle.setObjectName("mainTitle")

        # Choice of opponent label
        self.choiceLabel = QtWidgets.QLabel(self.centralwidget)
        self.choiceLabel.setGeometry(QtCore.QRect(150, 140, 300, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.choiceLabel.setFont(font)
        self.choiceLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.choiceLabel.setObjectName("choiceLabel")

        # Line seperating main title and rest of content
        self.MainTitleLine = QtWidgets.QFrame(self.centralwidget)
        self.MainTitleLine.setGeometry(QtCore.QRect(25, 90, 550, 16))
        self.MainTitleLine.setFrameShape(QtWidgets.QFrame.HLine)
        self.MainTitleLine.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.MainTitleLine.setObjectName("MainTitleLine")

        # Frame for the bot choice
        self.botFrame = QtWidgets.QFrame(self.centralwidget)
        self.botFrame.setGeometry(QtCore.QRect(35, 200, 230, 230))
        self.botFrame.setFrameShape(QtWidgets.QFrame.Box)
        self.botFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.botFrame.setLineWidth(1)
        self.botFrame.setMidLineWidth(1)
        self.botFrame.setObjectName("botFrame")

        # Frame line for bot choice
        self.botFrameLine = QtWidgets.QFrame(self.botFrame)
        self.botFrameLine.setGeometry(QtCore.QRect(30, 60, 181, 16))
        self.botFrameLine.setFrameShape(QtWidgets.QFrame.HLine)
        self.botFrameLine.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.botFrameLine.setObjectName("botFrameLine")

        # Choose difficulty label for bot choice
        self.choosedifLabel = QtWidgets.QLabel(self.botFrame)
        self.choosedifLabel.setGeometry(QtCore.QRect(40, 90, 161, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.choosedifLabel.setFont(font)
        self.choosedifLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.choosedifLabel.setObjectName("choosedifLabel")

        # Bot choice radio button. Added to player2Group
        self.botRadioButton = QtWidgets.QRadioButton(self.botFrame)
        self.botRadioButton.setGeometry(QtCore.QRect(90, 30, 61, 21))
        self.botRadioButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.botRadioButton.setFont(font)
        self.botRadioButton.setObjectName("botRadioButton")

        # Bot difficulty easy radio button. Added to botDifficultyGroup.
        self.easyRadioButton = QtWidgets.QRadioButton(self.botFrame)
        self.easyRadioButton.setGeometry(QtCore.QRect(80, 130, 71, 21))
        self.easyRadioButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.easyRadioButton.setFont(font)
        self.easyRadioButton.setCheckable(True)
        self.easyRadioButton.setChecked(False)
        self.easyRadioButton.setObjectName("easyRadioButton")

        # Bot difficulty hard radio button. Added to botDifficultyGroup.
        self.hardRadioButton = QtWidgets.QRadioButton(self.botFrame)
        self.hardRadioButton.setGeometry(QtCore.QRect(80, 160, 71, 21))
        self.hardRadioButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.hardRadioButton.setFont(font)
        self.hardRadioButton.setObjectName("hardRadioButton")

        # Start button
        self.startButton = QtWidgets.QPushButton(self.centralwidget)
        self.startButton.setGeometry(QtCore.QRect(225, 470, 150, 50))
        self.startButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.startButton.setFlat(False)
        self.startButton.setObjectName("startButton")

        # Frame for the player 2 choice
        self.player2Frame = QtWidgets.QFrame(self.centralwidget)
        self.player2Frame.setGeometry(QtCore.QRect(335, 200, 230, 230))
        self.player2Frame.setFrameShape(QtWidgets.QFrame.Box)
        self.player2Frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.player2Frame.setLineWidth(1)
        self.player2Frame.setMidLineWidth(1)
        self.player2Frame.setObjectName("player2Frame")

        # Player 2 radio button for the player 2 choice. Added to player2Group.
        self.player2RadioButton = QtWidgets.QRadioButton(self.player2Frame)
        self.player2RadioButton.setGeometry(QtCore.QRect(70, 100, 99, 21))
        self.player2RadioButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.player2RadioButton.setFont(font)
        self.player2RadioButton.setAutoExclusive(True)
        self.player2RadioButton.setObjectName("player2RadioButton")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 600, 20))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        # Button Group for opponent type. Bot or Player 2. 
        player2Group = QtWidgets.QButtonGroup(MainWindow)
        player2Group.addButton(self.botRadioButton)
        player2Group.addButton(self.player2RadioButton)

        # Button Group for bot difficulty type. Easy or Hard.
        botDifficultyGroup = QtWidgets.QButtonGroup(MainWindow)
        botDifficultyGroup.addButton(self.easyRadioButton)
        botDifficultyGroup.addButton(self.hardRadioButton)

        # Checks which opponent option is checked and sets opponent type accordingly
        self.opType = ""
        self.player2RadioButton.toggled.connect(lambda: self.setOpPlayer2(self.player2RadioButton.isChecked()))
        self.botRadioButton.toggled.connect(lambda: self.setOpBot(self.botRadioButton.isChecked()))

        # Checks which bot difficulty option is checked and sets the difficulty accordingly
        self.botDifficulty = ""
        self.easyRadioButton.toggled.connect(lambda: self.setBotDifEasy(self.easyRadioButton.isChecked()))
        self.hardRadioButton.toggled.connect(lambda: self.setBotDifHard(self.hardRadioButton.isChecked()))

        # Checks if the start button is clicked
        self.startButton.clicked.connect(self.startGame)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    # sets opponent type to player 2
    def setOpPlayer2(self, player2Checked):
        if (player2Checked):
            self.opType = "player2"
            self.choiceLabel.setText("Player 2 chosen")   
    
    # sets opponent type to bot
    def setOpBot(self, botChecked):
        if (botChecked):
            self.opType = "bot"
            self.choiceLabel.setText("Bot chosen")        

    # sets bot difficulty to easy
    def setBotDifEasy(self, easyChecked):
        if (easyChecked):
            self.botDifficulty = "easy"

    # sets bot difficulty to hard
    def setBotDifHard(self, hardChecked):
        if (hardChecked):
            self.botDifficulty = "hard"
    
    # starts the game. Checks if op type is chosen and if bot difficulty is chosen 
    def startGame(self):
        if (self.opType=="bot"):
            if (self.botDifficulty==""): 
                self.choiceLabel.setText("Don't forget to pick a difficulty!")
                return
        elif (self.opType==""):
            self.choiceLabel.setText("You forgot to pick your opponent type!")
            return

        # set up game window
        GameWindow = QtWidgets.QMainWindow()
        gameWindowUi = Ui_GameWindow()
        gameWindowUi.setupUi(GameWindow)
        gameWindowUi.configGame(self.opType, self.botDifficulty)
        stack.addWidget(GameWindow)

        stack.setCurrentIndex(stack.currentIndex()+1)      

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.mainTitle.setText(_translate("MainWindow", "The Super Cool Tic-Tac-Toe Game"))
        self.choiceLabel.setText(_translate("MainWindow", "Who do you want to play against?"))
        self.choosedifLabel.setText(_translate("MainWindow", "Choose difficulty:"))
        self.botRadioButton.setText(_translate("MainWindow", "Bot"))
        self.easyRadioButton.setText(_translate("MainWindow", "Easy"))
        self.hardRadioButton.setText(_translate("MainWindow", "Hard"))
        self.startButton.setText(_translate("MainWindow", "Start"))
        self.player2RadioButton.setText(_translate("MainWindow", "Player 2"))

class Ui_GameWindow(object):
    def setupUi(self, GameWindow):
        GameWindow.setObjectName("GameWindow")
        GameWindow.resize(600, 600)

        self.centralwidget = QtWidgets.QWidget(GameWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.mainLabel = QtWidgets.QLabel(self.centralwidget)
        self.mainLabel.setGeometry(QtCore.QRect(50, 30, 500, 50))
        font = QtGui.QFont()
        font.setPointSize(30)
        self.mainLabel.setFont(font)
        self.mainLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.mainLabel.setObjectName("mainLabel")

        self.box1 = QtWidgets.QPushButton(self.centralwidget)
        self.box1.setGeometry(QtCore.QRect(120, 110, 120, 120))
        self.box1.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.box1.setMouseTracking(False)
        box1Font = QtGui.QFont()
        box1Font.setPointSize(20)
        self.box1.setFont(box1Font)
        self.box1.setText("")
        self.box1.setObjectName("box1")

        self.box4 = QtWidgets.QPushButton(self.centralwidget)
        self.box4.setGeometry(QtCore.QRect(120, 230, 120, 120))
        self.box4.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        box4Font = QtGui.QFont()
        box4Font.setPointSize(20)
        self.box4.setFont(box1Font)
        self.box4.setText("")
        self.box4.setObjectName("box4")

        self.box7 = QtWidgets.QPushButton(self.centralwidget)
        self.box7.setGeometry(QtCore.QRect(120, 350, 120, 120))
        self.box7.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        box7Font = QtGui.QFont()
        box7Font.setPointSize(20)
        self.box7.setFont(box1Font)
        self.box7.setText("")
        self.box7.setObjectName("box7")

        self.box5 = QtWidgets.QPushButton(self.centralwidget)
        self.box5.setGeometry(QtCore.QRect(240, 230, 120, 120))
        self.box5.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        box5Font = QtGui.QFont()
        box5Font.setPointSize(20)
        self.box5.setFont(box1Font)
        self.box5.setText("")
        self.box5.setObjectName("box5")

        self.box2 = QtWidgets.QPushButton(self.centralwidget)
        self.box2.setGeometry(QtCore.QRect(240, 110, 120, 120))
        self.box2.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        box2Font = QtGui.QFont()
        box2Font.setPointSize(20)
        self.box2.setFont(box1Font)
        self.box2.setText("")
        self.box2.setObjectName("box2")

        self.box8 = QtWidgets.QPushButton(self.centralwidget)
        self.box8.setGeometry(QtCore.QRect(240, 350, 120, 120))
        self.box8.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        box8Font = QtGui.QFont()
        box8Font.setPointSize(20)
        self.box8.setFont(box1Font)
        self.box8.setText("")
        self.box8.setObjectName("box8")

        self.box9 = QtWidgets.QPushButton(self.centralwidget)
        self.box9.setGeometry(QtCore.QRect(360, 350, 120, 120))
        self.box9.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        box9Font = QtGui.QFont()
        box9Font.setPointSize(20)
        self.box9.setFont(box1Font)
        self.box9.setText("")
        self.box9.setObjectName("box9")

        self.box6 = QtWidgets.QPushButton(self.centralwidget)
        self.box6.setGeometry(QtCore.QRect(360, 230, 120, 120))
        self.box6.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        box6Font = QtGui.QFont()
        box6Font.setPointSize(20)
        self.box6.setFont(box1Font)
        self.box6.setText("")
        self.box6.setObjectName("box6")

        self.box3 = QtWidgets.QPushButton(self.centralwidget)
        self.box3.setGeometry(QtCore.QRect(360, 110, 120, 120))
        self.box3.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        box3Font = QtGui.QFont()
        box3Font.setPointSize(20)
        self.box3.setFont(box1Font)
        self.box3.setText("")
        self.box3.setObjectName("box3")

        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(120, 220, 361, 20))
        self.line.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line.setLineWidth(2)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setObjectName("line")

        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(119, 340, 361, 20))
        self.line_2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_2.setLineWidth(2)
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setObjectName("line_2")

        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setGeometry(QtCore.QRect(240, 110, 3, 360))
        self.line_3.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_3.setLineWidth(2)
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setObjectName("line_3")

        self.line_4 = QtWidgets.QFrame(self.centralwidget)
        self.line_4.setGeometry(QtCore.QRect(360, 110, 3, 360))
        self.line_4.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_4.setLineWidth(2)
        self.line_4.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_4.setObjectName("line_4")

        self.quitButton = QtWidgets.QPushButton(self.centralwidget)
        self.quitButton.setGeometry(QtCore.QRect(225, 500, 150, 50))
        self.quitButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.quitButton.setObjectName("quitButton")

        GameWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(GameWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 600, 20))
        self.menubar.setObjectName("menubar")
        GameWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(GameWindow)
        self.statusbar.setObjectName("statusbar")
        GameWindow.setStatusBar(self.statusbar)

        # variable for current player
        self.curPlayer = "X"

        # initializes tic tac toe game
        self.game = tic_tac_toe_gui()

        self.coordToNumMap = {
            "[0, 0]": self.box1, "[0, 1]": self.box2, "[0, 2]": self.box3, 
            "[1, 0]": self.box4, "[1, 1]": self.box5, "[1, 2]": self.box6,
            "[2, 0]": self.box7, "[2, 1]": self.box8, "[2, 2]": self.box9,
        }


        # checks if quit button has been clicked. If so, returns to main window
        self.quitButton.clicked.connect(self.changeWindow)

        # checks for if any of the boxes are clicked
        self.box1.clicked.connect(lambda: self.gameDriver(self.box1, 0, 0))
        self.box2.clicked.connect(lambda: self.gameDriver(self.box2, 0, 1))
        self.box3.clicked.connect(lambda: self.gameDriver(self.box3, 0, 2))
        self.box4.clicked.connect(lambda: self.gameDriver(self.box4, 1, 0))
        self.box5.clicked.connect(lambda: self.gameDriver(self.box5, 1, 1))
        self.box6.clicked.connect(lambda: self.gameDriver(self.box6, 1, 2))
        self.box7.clicked.connect(lambda: self.gameDriver(self.box7, 2, 0))
        self.box8.clicked.connect(lambda: self.gameDriver(self.box8, 2, 1))
        self.box9.clicked.connect(lambda: self.gameDriver(self.box9, 2, 2))


        self.retranslateUi(GameWindow)
        QtCore.QMetaObject.connectSlotsByName(GameWindow)


    def configGame(self, opType, botDifficulty):
        self.game.op_type = opType
        self.game.bot_difficulty = botDifficulty

    # disables all boxes
    def disableAllBoxes(self):
        self.box1.setEnabled(False)
        self.box2.setEnabled(False)
        self.box3.setEnabled(False)
        self.box4.setEnabled(False)
        self.box5.setEnabled(False)
        self.box6.setEnabled(False)
        self.box7.setEnabled(False)
        self.box8.setEnabled(False)
        self.box9.setEnabled(False)

    # updates the gui's board 
    #def updateBoard(self, boardRow, boardCol, symbol):
     #   box = self.coordToNumMap[str([boardRow, boardCol])]
      #  box.setText(symbol)

    # game driver
    def gameDriver(self, box, boardRow, boardCol):

        # checks if the desired move is available
        if (not self.game.is_box_available(boardRow, boardCol)):
            self.mainLabel.setText("Choose another box")
            return

        # sets player's box in game and updates gui
        self.game.board[boardRow][boardCol] = self.curPlayer
        box.setText(self.curPlayer)

        # checks if the move causes a win, loss, or draw. Stops if so.
        if (not self.checkBoard()):
            return

        # game driver if the opponent type is bot
        if (self.game.op_type=="bot"):
            botBox = self.coordToNumMap[str(self.game.bot_move())]
            botBox.setText("O")
            
            # checks if the move causes a win, loss, or draw. Stops if so.
            if (not self.checkBoard()):
                return

        # game driver if opponent type is player2
        if (self.game.op_type=="player2"):

            # updates all necessary texts and changes current player
            self.curPlayer = "O" if self.curPlayer=="X" else "X"
            self.mainLabel.setText(f"{self.curPlayer}'s turn")

    # check if move causes a win or lose. True means can continue. False means done.
    def checkBoard(self):
        # checks for a win or loss
        score = self.game.check_board(self.game.board, "X", "O")
        if (score!=0):
            
            self.disableAllBoxes()  

            box1, box2, box3 = self.game.get_winning_boxes()
            box1 = str(box1)
            box2 = str(box2)
            box3 = str(box3)

            box1 = self.coordToNumMap[box1]
            box2 = self.coordToNumMap[box2]
            box3 = self.coordToNumMap[box3]

            box1Font = QtGui.QFont()
            box1Font.setPointSize(20)
            box1Font.setBold(True)
            box1.setFont(box1Font)

            box2Font = QtGui.QFont()
            box2Font.setPointSize(20)
            box2Font.setBold(True)
            box2.setFont(box2Font)

            box3Font = QtGui.QFont()
            box3Font.setPointSize(20)
            box3Font.setBold(True)
            box3.setFont(box3Font)

            if (self.game.op_type=="player2"):
                if (score==1):
                    self.mainLabel.setText("X Wins!")
                else:
                    self.mainLabel.setText("O Wins!")
            else:
                if (score==1):
                    self.mainLabel.setText("You Win!")
                else:
                    self.mainLabel.setText("You Lost :(")
            return False

        # checks for a draw
        if (not self.game.check_moves_left(self.game.board)):
            self.mainLabel.setText("Draw")
            self.disableAllBoxes()
            return False
 
        return True
                
    # changes the winodw back to the main window
    def changeWindow(self):
        stack.removeWidget(stack.currentWidget())

    def retranslateUi(self, GameWindow):
        _translate = QtCore.QCoreApplication.translate
        GameWindow.setWindowTitle(_translate("GameWindow", "MainWindow"))
        if (self.game.op_type == "bot"):
            self.mainLabel.setText("Your turn")
        else:
            self.mainLabel.setText(_translate("GameWindow", "X\'s Turn"))
        self.quitButton.setText(_translate("GameWindow", "Quit"))

if __name__ == "__main__":
    import sys

    # initializes main app
    app = QtWidgets.QApplication(sys.argv)

    # set up QStackWidget
    stack = QtWidgets.QStackedWidget()
    stack.setFixedHeight(600)
    stack.setFixedWidth(600)

    # set up main window
    MainWindow = QtWidgets.QMainWindow()
    mainWindowUi = Ui_MainWindow()
    mainWindowUi.setupUi(MainWindow)
    stack.addWidget(MainWindow)

    # runs stack
    stack.show()

    sys.exit(app.exec_())